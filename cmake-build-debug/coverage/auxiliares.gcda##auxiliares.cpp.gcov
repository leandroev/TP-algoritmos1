        -:    0:Source:C:/Users/Lean-zabi-chan/Desktop/transporteUrbano/auxiliares.cpp
        -:    0:Graph:C:\Users\Lean-zabi-chan\Desktop\transporteUrbano\cmake-build-debug\CMakeFiles\transporteUrbanoTest.dir\auxiliares.gcno
        -:    0:Data:C:\Users\Lean-zabi-chan\Desktop\transporteUrbano\cmake-build-debug\CMakeFiles\transporteUrbanoTest.dir\auxiliares.gcda
        -:    0:Runs:1
        -:    1:#include <algorithm>
        -:    2:#include "auxiliares.h"
        -:    3:
        -:    4:const double pi = 3.14;
        -:    5:double radioTierra = 6378;
        -:    6:
function _Z14obtenerLatitudSt5tupleIJddEE called 4771 returned 100% blocks executed 100%
     4771:    7:double obtenerLatitud(gps posicion) {
     4771:    8:    return get<0>(posicion);
     4771:    8-block  0
call    0 returned 4771
        -:    9:}
        -:   10:
function _Z15obtenerLongitudSt5tupleIJddEE called 4701 returned 100% blocks executed 100%
     4701:   11:double obtenerLongitud(gps posicion) {
     4701:   12:    return get<1>(posicion);
     4701:   12-block  0
call    0 returned 4701
        -:   13:}
        -:   14:
function _Z15obtenerPosicionSt5tupleIJdS_IJddEEEE called 685 returned 100% blocks executed 100%
      685:   15:gps obtenerPosicion(tuple<tiempo, gps> medicion) {
      685:   16:    return get<1>(medicion);
      685:   16-block  0
call    0 returned 685
        -:   17:}
        -:   18:
function _Z13obtenerTiempoSt5tupleIJdS_IJddEEEE called 582 returned 100% blocks executed 100%
      582:   19:tiempo obtenerTiempo(tuple<tiempo, gps> medicion) {
      582:   20:    return get<0>(medicion);
      582:   20-block  0
call    0 returned 582
        -:   21:}
        -:   22:
function _Z22obtenerEsquinaSuperiorSt5tupleIJS_IJddEES0_S_IJiiEEEE called 603 returned 100% blocks executed 100%
      603:   23:gps obtenerEsquinaSuperior(celda c) {
      603:   24:    return get<1>(c);
      603:   24-block  0
call    0 returned 603
        -:   25:}
        -:   26:
function _Z22obtenerEsquinaInferiorSt5tupleIJS_IJddEES0_S_IJiiEEEE called 603 returned 100% blocks executed 100%
      603:   27:gps obtenerEsquinaInferior(celda c) {
      603:   28:    return get<0>(c);
      603:   28-block  0
call    0 returned 603
        -:   29:}
        -:   30:
function _Z13obtenerNombreSt5tupleIJS_IJddEES0_S_IJiiEEEE called 494 returned 100% blocks executed 100%
      494:   31:nombre obtenerNombre(celda c) {
      494:   32:    return get<2>(c);
      494:   32-block  0
call    0 returned 494
        -:   33:}
        -:   34:
function _Z7distMtsSt5tupleIJddEES0_ called 578 returned 100% blocks executed 100%
      578:   35:double distMts(gps posicion1, gps posicion2){
      578:   36:    return distEnKM(posicion1, posicion2) * 1000;
      578:   36-block  0
call    0 returned 578
        -:   37:}
        -:   38:
        -:   39:
function _Z8distEnKMSt5tupleIJddEES0_ called 605 returned 100% blocks executed 100%
      605:   40:double distEnKM(gps posicion1, gps posicion2) {
      605:   41:    double latitud1 = obtenerLatitud(posicion1);
      605:   41-block  0
call    0 returned 605
      605:   42:    double latitud2 = obtenerLatitud(posicion2);
call    0 returned 605
      605:   43:    double longitud1 = obtenerLongitud(posicion1);
call    0 returned 605
      605:   44:    double longitud2 = obtenerLongitud(posicion2);
call    0 returned 605
        -:   45:
        -:   46:    // obtengo la distancia
      605:   47:    double distanciaLatitud = (latitud2 - latitud1) * pi / 180.0;
      605:   48:    double distanciaLongitud = (longitud2 - longitud1) * pi / 180.0;
        -:   49:
        -:   50:    // paso las latitudes a radianes
      605:   51:    latitud1 = (latitud1) * pi / 180.0;
      605:   52:    latitud2 = (latitud2) * pi / 180.0;
        -:   53:
        -:   54:    // aplico la formula
      605:   55:    double a = pow(sin(distanciaLatitud / 2), 2) +
call    0 returned 605
      605:   56:               pow(sin(distanciaLongitud / 2), 2) *
call    0 returned 605
      605:   57:               cos(latitud1) * cos(latitud2);
        -:   58:
      605:   59:    double c = 2 * asin(sqrt(a));
      605:   60:    return radioTierra * c;
        -:   61:}
        -:   62:
function _Z12desviarPuntoSt5tupleIJddEEdd called 121 returned 100% blocks executed 100%
      121:   63:gps desviarPunto(gps p, double desvioMtsLatitud, double desvioMtsLongitud){
      121:   64:    double lat = obtenerLatitud(p);
      121:   64-block  0
call    0 returned 121
      121:   65:    double lon = obtenerLongitud(p);
call    0 returned 121
        -:   66:
      121:   67:    double dx = desvioMtsLatitud / 1000;
      121:   68:    double dy = desvioMtsLongitud / 1000;
      121:   69:    double new_latitude = lat + (dx / radioTierra) * (180 / pi);
      121:   70:    double new_longitude = lon + (dy / radioTierra) * (180 / pi) / cos(lat * pi / 180);
      121:   71:    return puntoGps(new_latitude, new_longitude);
call    0 returned 121
        -:   72:
        -:   73:}
        -:   74:
        -:   75:
function _Z8puntoGpsdd called 261 returned 100% blocks executed 100%
      261:   76:gps puntoGps(double latitud, double longitud) {
      261:   77:    return make_tuple(latitud, longitud);
      261:   77-block  0
call    0 returned 261
        -:   78:}
        -:   79:
function _Z8mediciondSt5tupleIJddEE called 193 returned 100% blocks executed 100%
      193:   80:tuple<tiempo, gps> medicion(tiempo t, gps g) {
      193:   81:    return make_tuple(t, g);
      193:   81-block  0
call    0 returned 193
        -:   82:}
